Test cases for 2-matrix_divided.py
===================================

importing function from module:
	>>> matrix_divided = __import__("2-matrix_divided").matrix_divided

checking matrix for division:
	>>> matrix = [[3, 2, 1], [6, 5, 4]]
	 >>> matrix_divided(matrix, 3)
	 [[1.0, 0.67, 0.33], [2.0, 1.67, 1.33]]

checking for both integers and floats:
	>>> matrix = [[1.5, 2, 3], [4.5, 5, 6.3]]
	>>> matrix_divided(matrix, 3)
	[[0.5, 0.67, 1.0], [1.5, 1.67, 2.1]]

using the divisor as float:
	>>> matrix = [[1, 2, 3], [14, 25, 16]]
	 >>> matrix_divided(matrix, 2.5)
	 [[0.4, 0.8, 1.2], [5.6, 10.0, 6.4]]

checking for negative lists:
	>>> matrix = [[1, 2, 3], [4, 5, 6]]
	 >>> matrix_divided(matrix, -3)
	 [[-0.33, -0.67, -1.0], [-1.33, -1.67, -2.0]]

Checking for empty matrix:
	 >>> matrix = []
	 >>> matrix_divided(matrix, 1)
	 Traceback (most recent call last):
	 ...
	 TypeError: matrix must be a matrix (list of lists) of integers/floats

checking for None pased as parameter:
	 >>> matrix_divided(None, 1)
	 Traceback (most recent call last):
         ...
         TypeError: matrix must be a matrix (list of lists) of integers/floats

passing None as div:
	 >>> matrix = [[81, 65, 30], [7, 43, 46]]
	 >>> matrix_divided(matrix, None)
	 Traceback (most recent call last):
         ...
	 TypeError: div must be a number

checking for no arguements:
	 >>> matrix_divided()
         Traceback (most recent call last):
         ...
         TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

